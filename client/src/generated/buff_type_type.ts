// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace BuffType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Health = { tag: "Health", value: number };
  export type Attack = { tag: "Attack", value: number };
  export type AttackSpeed = { tag: "AttackSpeed", value: number };
  export type MoveSpeed = { tag: "MoveSpeed", value: number };
  export type HpRegen = { tag: "HpRegen", value: number };
  export type Armor = { tag: "Armor", value: number };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Health = (value: number): BuffType => ({ tag: "Health", value });
  export const Attack = (value: number): BuffType => ({ tag: "Attack", value });
  export const AttackSpeed = (value: number): BuffType => ({ tag: "AttackSpeed", value });
  export const MoveSpeed = (value: number): BuffType => ({ tag: "MoveSpeed", value });
  export const HpRegen = (value: number): BuffType => ({ tag: "HpRegen", value });
  export const Armor = (value: number): BuffType => ({ tag: "Armor", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Health", AlgebraicType.createF32Type()),
      new SumTypeVariant("Attack", AlgebraicType.createF32Type()),
      new SumTypeVariant("AttackSpeed", AlgebraicType.createF32Type()),
      new SumTypeVariant("MoveSpeed", AlgebraicType.createF32Type()),
      new SumTypeVariant("HpRegen", AlgebraicType.createF32Type()),
      new SumTypeVariant("Armor", AlgebraicType.createF32Type()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: BuffType): void {
      BuffType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): BuffType {
      return BuffType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `BuffType`.
export type BuffType = BuffType.Health | BuffType.Attack | BuffType.AttackSpeed | BuffType.MoveSpeed | BuffType.HpRegen | BuffType.Armor;

export default BuffType;

